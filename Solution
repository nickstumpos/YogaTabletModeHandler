package com.nick.playground;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.TreeSet;

//https://codility.com/programmers/challenges/
class Solution {

    public static TreeSet<Edge>[]			nodeEdges		;
	public static Map<Integer, Integer>[]	bestDistance	;

	public static class Edge implements Comparable<Edge> {
		public Edge(int attr, int adjacentNode) {
			super();
			this.attr = attr;
			this.adjacentNode = adjacentNode;
		}

		public int	attr;
		public int	adjacentNode;

		@Override
		public int compareTo(Edge o) {
			return attr < o.attr ? -1 : (attr == o.attr ? 0 : 1);
		}
	}
  
  
	static int fillPaths(Edge incommingEdge, int i) {
		int height = 0;

	    if (incommingEdge == null) return height;

	    final Queue<Edge> queue = new LinkedList<Edge>();
	    queue.add(incommingEdge);

	    int peerCount = 1;
	    int childCount = 0;

	    while (!queue.isEmpty()) {
	    	Edge current = queue.poll();
	        peerCount--;
	        for (Edge outgoingEdge : nodeEdges[current.adjacentNode].tailSet(current,false)) {
	        	queue.add(outgoingEdge); 
	        	childCount++;
			}
	        if (peerCount == 0) {
	            height++;
	            peerCount = childCount;
	            childCount = 0;
	        }
	    }
	    return height;
	}
	
	public static int findLongestPath() {
		int currentLongest = 0;
		for (int i = 0; i< nodeEdges.length;i++) {		
			for (Edge e : nodeEdges[i]) {
				int edgeScore = fillPaths(e,i);
				if (edgeScore > currentLongest) {
					currentLongest = edgeScore;
				}
			}
		}
		return currentLongest;
	}

    public int solution(int N, int[] A, int[] B, int[] C) {
        bestDistance = new Map[N];
		nodeEdges = new TreeSet[N];
		for (int i = 0; i < N; i++) {
			bestDistance[i]= new HashMap<Integer, Integer>();
			nodeEdges[i] = new TreeSet<Edge>();
		}
		for (int i = 0; i < A.length; i++) {
			nodeEdges[A[i]].add(new Edge(C[i], B[i]));
			nodeEdges[B[i]].add(new Edge(C[i], A[i]));
		}
		return findLongestPath();
    }
}
